name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test || echo "No tests configured"

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          # Always update version from tag to ensure consistency
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ steps.version.outputs.clean_version }}"
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Target version from tag: $TARGET_VERSION"
          
          # Update package.json version to match the tag (allow same version for consistency)
          npm version $TARGET_VERSION --no-git-tag-version --allow-same-version
          echo "Updated package.json version to $TARGET_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changes for current version from CHANGELOG.md
            awk '/^## \[${{ steps.version.outputs.clean_version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > /tmp/release_notes.md
          else
            echo "Release ${{ steps.version.outputs.version }}" > /tmp/release_notes.md
            echo "" >> /tmp/release_notes.md
            echo "### Changes" >> /tmp/release_notes.md
            echo "- Updated to version ${{ steps.version.outputs.clean_version }}" >> /tmp/release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: /tmp/release_notes.md
          draft: false
          prerelease: false

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Verify token is set
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "Error: NPM_TOKEN is not set in repository secrets"
            echo "Please add NPM_TOKEN to your repository secrets with a valid NPM automation token"
            exit 1
          fi
          
          # Publish to NPM (authentication handled by setup-node action)
          npm publish --access public

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.version.outputs.clean_version }}
          path: |
            dist/
            package.json
            README.md
            LICENSE